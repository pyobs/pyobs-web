{"version":3,"sources":["webpack:///./src/app/shared/coordinates.pipe.ts","webpack:///./src/app/telescope/telescope-routing.module.ts","webpack:///./src/app/telescope/telescope.component.css","webpack:///./src/app/telescope/telescope.component.html","webpack:///./src/app/telescope/telescope.component.ts","webpack:///./src/app/telescope/telescope.module.ts"],"names":[],"mappings":"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","file":"telescope-telescope-module.js","sourcesContent":["import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n    name: 'coordinates'\n})\nexport class CoordinatesPipe implements PipeTransform {\n    static deg2sexagesimal(degrees: number, ra: boolean) {\n        // nothing?\n        if (degrees === undefined || degrees === null) {\n            return '';\n        }\n        // save it\n        let deg = Math.abs(degrees);\n        // if right ascension, divide by 15\n        if (ra) {\n            deg /= 15.;\n        }\n        // get degrees/hours\n        const dh = Math.floor(deg);\n        // minutes\n        const m = Math.floor((deg - dh) * 60.);\n        // seconds\n        const s = (deg - dh - m / 60.) * 3600.;\n        // build string\n        let str = '';\n        // hours\n        if (!ra) {\n            str += (degrees < 0) ? '-' : '+';\n        }\n        if (Math.abs(dh) < 10) {\n            str += '0';\n        }\n        str += dh.toString();\n        // minutes\n        str += ':';\n        if (Math.abs(m) < 10) {\n            str += '0';\n        }\n        str += m.toString();\n        // seconds\n        str += ':';\n        if (Math.abs(s) < 10) {\n            str += '0';\n        }\n        str += s.toFixed(1);\n        return str;\n    }\n\n    static sexagesimal2deg(coords: string, ra: boolean) {\n        // analyze\n        const re = /([+-]?[0-9][0-9]?)[:\\s]([0-9][0-9]?)[:\\s]([0-9][0-9]?(\\.[0-9]+)?)/;\n        const m = re.exec(coords);\n        // calc\n        let deg = Math.abs(parseFloat(m[1])) + parseFloat(m[2]) / 60. + parseFloat(m[3]) / 3600.;\n        // sign\n        if (m[1].indexOf('-') !== -1) {\n            deg *= -1;\n        }\n        // ra?\n        if (ra) {\n            deg *= 15.;\n        }\n        // return\n        return deg;\n    }\n\n    transform(value: any, ra: boolean): any {\n        return CoordinatesPipe.deg2sexagesimal(value, ra);\n    }\n\n}\n","import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {TelescopeComponent} from './telescope.component';\n\nconst routes: Routes = [{\n    path: '',\n    children: [\n        {\n            path: ':module',\n            component: TelescopeComponent\n        }\n    ]\n}];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class TelescopeRoutingModule {\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"row\\\" *ngIf=\\\"telescope_status$ | async; let status\\\">\\n    <div class=\\\"col-md-4\\\">\\n        <h3>Status</h3>\\n        <form>\\n            <div class=\\\"form-group row\\\">\\n                <label for=\\\"status\\\" class=\\\"col-sm-4 col-form-label\\\">Status:</label>\\n                <div class=\\\"col-sm-8\\\">\\n                    <input type=\\\"text\\\" readonly class=\\\"form-control\\\" id=\\\"status\\\"\\n                           value=\\\"{{status.Status}}\\\">\\n                </div>\\n            </div>\\n            <div class=\\\"form-group row\\\">\\n                <label for=\\\"curRA\\\" class=\\\"col-sm-4 col-form-label\\\">RA:</label>\\n                <div class=\\\"col-sm-8\\\">\\n                    <input type=\\\"text\\\" readonly class=\\\"form-control\\\" id=\\\"curRA\\\"\\n                           value=\\\"{{status.Position.RA}}\\\">\\n                </div>\\n            </div>\\n            <div class=\\\"form-group row\\\">\\n                <label class=\\\"col-sm-4 col-form-label\\\">Dec:</label>\\n                <div class=\\\"col-sm-8\\\">\\n                    <input type=\\\"text\\\" readonly class=\\\"form-control\\\" id=\\\"curDec\\\"\\n                           value=\\\"{{status.Position.Dec}}\\\">\\n                </div>\\n            </div>\\n            <div class=\\\"form-group row\\\">\\n                <label for=\\\"curAlt\\\" class=\\\"col-sm-4 col-form-label\\\">Alt:</label>\\n                <div class=\\\"col-sm-8\\\">\\n                    <input type=\\\"text\\\" readonly class=\\\"form-control\\\" id=\\\"curAlt\\\"\\n                           value=\\\"--\\\">\\n                </div>\\n            </div>\\n            <div class=\\\"form-group row\\\">\\n                <label class=\\\"col-sm-4 col-form-label\\\">Az:</label>\\n                <div class=\\\"col-sm-8\\\">\\n                    <input type=\\\"text\\\" readonly class=\\\"form-control\\\" id=\\\"curAz\\\"\\n                           value=\\\"--\\\">\\n                </div>\\n            </div>\\n            <div class=\\\"form-group row\\\">\\n                <div class=\\\"offset-sm-4 col-sm-8\\\">\\n                    <button type=\\\"button\\\" class=\\\"btn btn-success btn-block\\\" (click)=\\\"init_telescope()\\\">Init</button>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group row\\\">\\n                <div class=\\\"offset-sm-4 col-sm-8\\\">\\n                    <button type=\\\"button\\\" class=\\\"btn btn-danger btn-block\\\" (click)=\\\"park_telescope()\\\">Park</button>\\n                </div>\\n            </div>\\n        </form>\\n    </div>\\n    <div class=\\\"col-md-4\\\">\\n        <h3>Move RA/Dec</h3>\\n        <form #trackForm=\\\"ngForm\\\" (submit)=\\\"track(trackForm)\\\">\\n            <div class=\\\"form-group row\\\">\\n                <label for=\\\"moveRA\\\" class=\\\"col-sm-4 col-form-label\\\">RA:</label>\\n                <div class=\\\"col-sm-8\\\">\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"ra\\\" id=\\\"moveRA\\\" placeholder=\\\"RA\\\"\\n                           required [(ngModel)]=\\\"set_ra\\\">\\n                </div>\\n            </div>\\n            <div class=\\\"form-group row\\\">\\n                <label for=\\\"moveDec\\\" class=\\\"col-sm-4 col-form-label\\\">Dec:</label>\\n                <div class=\\\"col-sm-8\\\">\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"ra\\\" id=\\\"moveDec\\\" placeholder=\\\"Dec\\\"\\n                           required [(ngModel)]=\\\"set_dec\\\">\\n                </div>\\n            </div>\\n        </form>\\n\\n        <h3>Simbad query</h3>\\n        <form #simbadForm=\\\"ngForm\\\" (submit)=\\\"query_simbad(simbadForm)\\\">\\n            <div class=\\\"form-group row\\\">\\n                <label for=\\\"simbadName\\\" class=\\\"col-sm-4 col-form-label\\\">Name:</label>\\n                <div class=\\\"col-sm-8\\\">\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"simbadName\\\" id=\\\"simbadName\\\" placeholder=\\\"Name\\\"\\n                           required ngModel>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group row\\\">\\n                <div class=\\\"col-sm-offset-4 col-sm-8\\\">\\n                    <button type=\\\"submit\\\" class=\\\"btn btn-success btn-block\\\">Query</button>\\n                </div>\\n            </div>\\n\\n        </form>\\n    </div>\\n</div>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {ITelescopeService, JsonRpcService} from '../shared/json-rpc.service';\nimport {Status} from '../shared/status-factory';\nimport {Observable, Subscription} from 'rxjs';\nimport {NgForm} from '@angular/forms';\nimport {ActivatedRoute} from '@angular/router';\nimport {CoordinatesPipe} from '../shared/coordinates.pipe';\n\n@Component({\n    selector: 'pytel-telescope',\n    templateUrl: './telescope.component.html',\n    styleUrls: ['./telescope.component.css']\n})\nexport class TelescopeComponent implements OnInit {\n    public module: string;\n    public telescope_status$: Observable<Status>;\n    public set_ra: string;\n    public set_dec: string;\n    private coordinates_query$: Subscription;\n\n    constructor(private route: ActivatedRoute, private jsonrpc: JsonRpcService, private ITelescope: ITelescopeService) {\n    }\n\n    ngOnInit() {\n        this.module = this.route.snapshot.params['module'];\n        this.telescope_status$ = this.jsonrpc.getStatus(this.module, 'ITelescope');\n    }\n\n    public init_telescope() {\n        this.ITelescope.init(this.module).subscribe();\n    }\n\n    public park_telescope() {\n        this.ITelescope.park(this.module).subscribe();\n    }\n\n    public track(form: NgForm) {\n        const ra = CoordinatesPipe.sexagesimal2deg(form.value.ra, true);\n        const dec = CoordinatesPipe.sexagesimal2deg(form.value.dec, false);\n        this.ITelescope.track(this.module, ra, dec).subscribe();\n    }\n\n    public query_simbad(form: NgForm) {\n        this.coordinates_query$ = this.ITelescope.query_simbad(this.module, form.value.object).subscribe(data => {\n            this.set_ra = data[0].ra;\n            this.set_dec = data[0].dec;\n        });\n    }\n\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {HttpClientModule} from '@angular/common/http';\nimport {FormsModule} from '@angular/forms';\nimport {TelescopeComponent} from './telescope.component';\nimport {TelescopeRoutingModule} from './telescope-routing.module';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        HttpClientModule,\n        FormsModule,\n        TelescopeRoutingModule\n    ],\n    declarations: [TelescopeComponent],\n    providers: [],\n    exports: [TelescopeComponent]\n})\nexport class TelescopeModule {\n}\n"],"sourceRoot":""}